# Projeto SaaS

Este é um projeto SaaS que utiliza Node.js e Express para fornecer uma API RESTful. A aplicação gerencia autenticação de usuários, Empresas (tenants) e permissões de acesso.

## URL Base

A URL base para acessar a API é: `https://projetosaas-y6vmba4x.b4a.run`

## Endpoints

### Autenticação

**Registrar Usuário**

- **URL:** `/auth/register`
- **Método:** `POST`
- **Descrição:** Registra um novo usuário.
- **Entradas:**
  - `username` (string): Nome de usuário.
  - `password` (string): Senha do usuário.
  - `email` (string): Email do usuário.
  - `telefone` (string): Telefone do usuário.
  - `nickname` (string, opcional): Apelido do usuário.

**Login**

- **URL:** `/auth/login`
- **Método:** `POST`
- **Descrição:** Autentica um usuário e retorna um token JWT.
- **Entradas:**
  - `username` (string): Nome de usuário.
  - `password` (string): Senha do usuário.

### Processo Intermediário

**Listar Empresas Por Usuário**

- **URL:** `/tenant/list`
- **Método:** `GET`
- **Descrição:** Lista todos os Empresas de um usuário de acordo com o Token do usuário logado.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno do Login.
- **Entradas:** Nenhuma (requer autenticação).


**Selecionar Inquilino**

- **URL:** `/tenant/select/:tenantID`
- **Método:** `POST`
- **Descrição:** Seleciona um inquilino para o usuário autenticado.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno do Login.
- **Entradas:**
  - `tenantID` (string): ID do inquilino.

*Ao selecionar o Tenant irá retornar um token com o Tenant selecionado que será utilizado nos endpoints a baixo.*

### Usuários

**Listar Usuários**

- **URL:** `/users/list`
- **Método:** `GET`
- **Descrição:** Lista todos os usuários de um inquilino.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno da seleção das Empresas.
- **Entradas:** Nenhuma (requer autenticação e permissões adequadas).

### Empresas (Tenants)

**Criar Inquilino**

- **URL:** `/tenant/create`
- **Método:** `POST`
- **Descrição:** Cria um novo inquilino.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno da seleção das Empresas.
- **Entradas:**
  - `name` (string): Nome do inquilino.
  - `usuario_responsavel` (string): Usuário responsável.
  - `subscription_level` (string, opcional): Nível de assinatura.
  - `email` (string): Email do inquilino.
  - `servidor` (string): Servidor do inquilino.

**Adicionar Usuário ao Inquilino**

- **URL:** `/tenant/addUser/:userID/:tenantID/:role`
- **Método:** `POST`
- **Descrição:** Adiciona um usuário a um inquilino com um papel específico.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno da seleção das Empresas.
- **Entradas:**
  - `userID` (string): ID do usuário.
  - `tenantID` (string): ID do inquilino.
  - `role` (string): Papel do usuário no inquilino.

**Obter Inquilino por ID**

- **URL:** `/tenant/:id`
- **Método:** `GET`
- **Descrição:** Obtém informações de um inquilino pelo ID.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno da seleção das Empresas.
- **Entradas:**
  - `id` (string): ID do inquilino.

**Obter Inquilino por Nome**

- **URL:** `/tenant/name/:tenantName`
- **Método:** `GET`
- **Descrição:** Obtém informações de um inquilino pelo nome.
- ** Headers:**
  - `Authorization` (string): Bearer: Retorno da seleção das Empresas.
- **Entradas:**
  - `tenantName` (string): Nome do inquilino.

## Instalação

1. Clone o repositório.
2. Instale as dependências com `npm install`.
3. Configure as variáveis de ambiente no arquivo `.env`.
4. Inicie o servidor com `npm start`.

## Docker

Para rodar a aplicação usando Docker:

1. Construa a imagem Docker: `docker build -t projeto-saas .`
2. Rode o contêiner: `docker run -p 3000:3000 projeto-saas`
